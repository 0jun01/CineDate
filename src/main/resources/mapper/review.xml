<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.tenco.movie.repository.interfaces.ReviewRepository">

	<select id="findByMovieId" parameterType="map" resultType="com.tenco.movie.repository.model.Review">
    SELECT
        r.id AS id,
        r.movie_id AS movieId,
        r.user_id AS userId,
        r.review_text AS reviewText,
        r.rating AS rating,
        r.review_date AS reviewDate,
        u.login_id AS userLoginId
    FROM
        review_tb r
    JOIN
        user_tb u ON r.user_id = u.id
    WHERE
        r.movie_id = #{movieId}
    ORDER BY
        r.review_date DESC
    LIMIT #{limit} OFFSET #{offset}
</select>


	<insert id="saveReview"
		parameterType="com.tenco.movie.repository.model.Review">
		INSERT INTO review_tb (movie_id, user_id, review_text, rating, review_date)
		VALUES (#{movieId}, #{userId}, #{reviewText}, #{rating},
		#{reviewDate})
	</insert>

	<select id="existsByMovieIdAndUserId" resultType="boolean">
		SELECT COUNT(*) > 0
		FROM review_tb
		WHERE movie_id = #{movieId}
		AND user_id = #{userId}
	</select>

	<!-- 리뷰 ID로 리뷰 조회 -->
    <select id="findById" resultType="com.tenco.movie.repository.model.Review">
        SELECT *
        FROM review_tb
        WHERE id = #{id}
    </select>

    <!-- 리뷰 ID로 리뷰 삭제 -->
    <delete id="deleteReviewById">
        DELETE FROM review_tb
        WHERE id = #{id}
    </delete>

 	<!-- 리뷰 업데이트 쿼리 -->
    <update id="updateReview" parameterType="com.tenco.movie.repository.model.Review">
        UPDATE review_tb
        SET review_text = #{reviewText},
            rating = #{rating},
            review_date = #{reviewDate}
        WHERE id = #{id}
    </update>
    
     <!-- 영화 ID로 리뷰 개수 카운트 -->
    <select id="countByMovieId" resultType="int">
        SELECT COUNT(*)
        FROM review_tb
        WHERE movie_id = #{movieId}
    </select>

<!-- 페이징 처리된 리뷰 목록 조회 쿼리 -->
    <select id="findByMovieIdWithPagination" resultType="com.tenco.movie.repository.model.Review">
        SELECT
            r.id AS id,
            r.movie_id AS movieId,
            r.user_id AS userId,
            r.review_text AS reviewText,
            r.rating AS rating,
            r.review_date AS reviewDate,
            u.login_id AS userLoginId
        FROM
            review_tb r
        JOIN
            user_tb u ON r.user_id = u.id
        WHERE
            r.movie_id = #{movieId}
        ORDER BY
            r.review_date DESC
        LIMIT
            #{size} OFFSET #{offset}
    </select>

</mapper>